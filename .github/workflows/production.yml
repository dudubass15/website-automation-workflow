name: Production

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: website ${{ github.run_number }}
        body: |
          Release created for commit ${{ github.sha }}.
        draft: false
        prerelease: false

  remove-container:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Remove existing container if exists
      run: |
        set -e
        CONTAINER_ID=$(curl -s -X GET "https://portainer.carloseduardo.dev/api/endpoints/2/docker/containers/json?all=true" \
        -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}" | jq -r '.[] | select(.Names[] == "/5_portfolio") | .Id')
        if [ -n "$CONTAINER_ID" ]; then
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "https://portainer.carloseduardo.dev/api/endpoints/2/docker/containers/$CONTAINER_ID?force=true" \
          -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}")
          if [ "$DELETE_RESPONSE" -ne 204 ]; then
            echo "Failed to delete container with ID $CONTAINER_ID. HTTP status code: $DELETE_RESPONSE"
            exit 1
          fi
        fi

  pull-image:
    runs-on: ubuntu-latest
    needs: remove-container

    steps:
    - name: Pull Docker image on Portainer
      run: |
        curl -X POST "https://portainer.carloseduardo.dev/api/endpoints/2/docker/images/create?fromImage=${{ secrets.DOCKER_USERNAME }}/portfolio&tag=latest" \
        -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}"

  deploy:
    runs-on: ubuntu-latest
    needs: pull-image

    steps:
    - name: Deploy to Portainer
      run: |
        curl -X POST "https://portainer.carloseduardo.dev/api/endpoints/2/docker/containers/create?name=5_portfolio" \
        -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        -d '{
              "Image": "${{ secrets.DOCKER_USERNAME }}/portfolio:latest",
              "HostConfig": {
                "PortBindings": {
                  "80/tcp": [
                    {
                      "HostPort": "8085"
                    }
                  ]
                }
              }
            }'
        curl -X POST "https://portainer.carloseduardo.dev/api/endpoints/2/docker/containers/5_portfolio/start" \
        -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}" \
        -d '{}'